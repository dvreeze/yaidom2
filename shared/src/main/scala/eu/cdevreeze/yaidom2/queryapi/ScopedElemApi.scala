/*
 * Copyright 2019-2019 Chris de Vreeze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.cdevreeze.yaidom2.queryapi

import eu.cdevreeze.yaidom2.core.EName
import eu.cdevreeze.yaidom2.core.QName
import eu.cdevreeze.yaidom2.core.Scope

import scala.collection.immutable.ListMap

/**
 * So-called scoped element API. It extends trait `ClarkElemApi`, but it is also aware of qualified names (of elements
 * and attributes), and of in-scope namespaces. Hence the name `ScopedElemApi`. This API knows about XML elements,
 * but it does not know about nodes other than element nodes.
 *
 * Implementation note: this class used a ListMap for the attributesByQName instead of VectorMap (via the SeqMap API), due to Scala issue
 * https://github.com/scala/scala/pull/8854.
 *
 * @author Chris de Vreeze
 */
trait ScopedElemApi extends ClarkElemApi {

  type ThisElem <: ScopedElemApi

  def scope: Scope

  def qname: QName

  def attributesByQName: ListMap[QName, String]

  def textAsQName: QName

  def textAsResolvedQName: EName

  def attrAsQNameOption(attributeName: EName): Option[QName]

  def attrAsQNameOption(attributeNamespaceOption: Option[String], attributeLocalName: String): Option[QName]

  def attrAsQNameOption(attributeNamespace: String, attributeLocalName: String): Option[QName]

  def attrAsQName(attributeName: EName): QName

  def attrAsQName(attributeNamespaceOption: Option[String], attributeLocalName: String): QName

  def attrAsQName(attributeNamespace: String, attributeLocalName: String): QName

  def attrAsResolvedQNameOption(attributeName: EName): Option[EName]

  def attrAsResolvedQNameOption(attributeNamespaceOption: Option[String], attributeLocalName: String): Option[EName]

  def attrAsResolvedQNameOption(attributeNamespace: String, attributeLocalName: String): Option[EName]

  def attrAsResolvedQName(attributeName: EName): EName

  def attrAsResolvedQName(attributeNamespaceOption: Option[String], attributeLocalName: String): EName

  def attrAsResolvedQName(attributeNamespace: String, attributeLocalName: String): EName
}

object ScopedElemApi {

  type Aux[E] = ScopedElemApi {
    type ThisElem = E
  }

  /**
   * Returns true if the element with its descendants contain no mutually conflicting Scopes. This is a very desirable
   * property, especially when building XML trees programmatically (where prefixes are generated by NamespacePrefixMappers).
   *
   * In other words, returns `containsNoConflictingScopes(Seq(elem))`.
   */
  def containsNoConflictingScopes(elem: ScopedElemApi): Boolean = {
    containsNoConflictingScopes(Seq(elem))
  }

  /**
   * Returns the "union Scope" of this element and all its descendants. If method containsNoConflictingScopes returns true,
   * each (descendant-or-self) element's Scope is a sub-scope of this union Scope. Otherwise, the resulting Scope prioritizes
   * scopes of elements over those of their descendants.
   */
  def unionScope(elem: ScopedElemApi): Scope = {
    val scopes: Seq[Scope] = elem.findAllDescendantElemsOrSelf.map(_.scope).distinct
    scopes.reduceRight(_.prepend(_))
  }

  /**
   * Returns true if the elements with their descendants contain no mutually conflicting Scopes (within or across root elements).
   * This is a very desirable property, especially when building XML trees programmatically (where prefixes are generated by
   * NamespacePrefixMappers).
   */
  def containsNoConflictingScopes(elems: Seq[ScopedElemApi]): Boolean = {
    val scopes: Seq[Scope] = elems.flatMap(_.findAllDescendantElemsOrSelf.map(_.scope).distinct).distinct
    val prefixNamespaces: Map[String, Seq[String]] = scopes.flatMap(_.prefixNamespaceMap.toSeq)
      .groupMap(_._1)(_._2)
    prefixNamespaces.values.forall(_.sizeIs == 1)
  }

  /**
   * Returns the "union Scope" of these elements and all their descendants. If method containsNoConflictingScopes returns true,
   * each (descendant-or-self) element's Scope is a sub-scope of this union Scope. Otherwise, the resulting Scope prioritizes
   * scopes of elements over those of their descendants per given (root) element.
   *
   * In other words, `elems.foldLeft(Scope.Empty) { case (accScope, elem) => accScope.append(unionScope(elem)) }`.
   */
  def unionScope(elems: Seq[ScopedElemApi]): Scope = {
    elems.foldLeft(Scope.Empty) { case (accScope, elem) => accScope.append(unionScope(elem)) }
  }
}
